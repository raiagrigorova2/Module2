a) According to Wikipedia:
"The Sierpinski triangle may be constructed from an equilateral triangle by repeated removal of triangular subsets:

-Start with an equilateral triangle.
-Subdivide it into four smaller congruent equilateral triangles and remove the central triangle.
-Repeat step 2 with each of the remaining smaller triangles infinitely."

b) The method paintComponent(Graphics g) is overridden so we can draw our triangles.
When overriding, we should invoke super.paintComponent(g), because:
"Further, if you do not invoke super's
implementation you must honor the opaque property, that
is if this component is opaque,
you must completely fill in the background in an opaque color.
If you do not honor the opaque property you will likely see visual artifacts."

Basically, if we don't invoke super.paintComponent(g), we will see weird, unexpected things on the screen. Unless we fill the background. 

c) According to Oracle, "paint() invokes paintComponent()."
			
"To understand how AWT's painting API works, helps
to know what triggers a paint operation in a windowing environment.
In AWT, there are two kinds of painting operations: system-triggered 
painting, and application-triggered painting. 
		
In a system-triggered painting operation, the system requests a component to render its contents, usually for one of the following reasons:
-The component is first made visible on the screen.(...)In an application-triggered painting operation, the component decides it needs to update its contents because its internal state has changed.(For example,. a button detects that a mouse button has been pressed and determines that it needs to paint a "depressed" button visual)."
			
Basically, paint() invokes paintComponent() and paint() is triggered by the system when the component is
first made visible on the screen. Then, we have application-triggered painting in setOrder(int order) - repaint().

d) The starting points are the points of the biggest triangle possible (when order = 0)
	//Top point 
	Point p1 = new Point(getWidth() / 2, 10);
	//Left point 
	Point p2 = new Point(10, getHeight() - 10);
	//Right point 
	Point p3 = new Point(getWidth() - 10, getHeight() - 10);

e) We start drawing once order = 0 
	Top point - p1 
	Left point - p2 
	Right point - p3 

First, displayTriangles(g, order - 1, p1, p12, p31) (top triangle) is called. Then displayTriangles(g, order - 1, p12, p2, p23) (left) and displayTriangles(g, order - 1, p31, p23, p3) (right). So, drawing is done top - left - right.
If the sub-triangle thing we have at the top needs to be divided as well, we draw top - left - right again.
The drawing is done once for order = 0, 3 times for order = 1 and 9 for order = 2. So, the formula is 
number of triangles = 3^(order) (3^0 = 1, 3^1 = 3, 3^2 = 9)
NOTE THAT WE DONT DRAW THE MIDDLE TRIANGLES they just happen when we draw the smaller ones 